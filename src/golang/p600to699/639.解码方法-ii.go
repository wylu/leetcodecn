package p600to699

/*
 * @lc app=leetcode.cn id=639 lang=golang
 *
 * [639] 解码方法 II
 *
 * https://leetcode-cn.com/problems/decode-ways-ii/description/
 *
 * algorithms
 * Hard (36.42%)
 * Likes:    135
 * Dislikes: 0
 * Total Accepted:    10.7K
 * Total Submissions: 29.6K
 * Testcase Example:  '"*"'
 *
 * 一条包含字母 A-Z 的消息通过以下的方式进行了编码：
 *
 *
 * 'A' -> 1
 * 'B' -> 2
 * ...
 * 'Z' -> 26
 *
 *
 * 要 解码 一条已编码的消息，所有的数字都必须分组，然后按原来的编码方案反向映射回字母（可能存在多种方式）。例如，"11106" 可以映射为：
 *
 *
 * "AAJF" 对应分组 (1 1 10 6)
 * "KJF" 对应分组 (11 10 6)
 *
 *
 * 注意，像 (1 11 06) 这样的分组是无效的，因为 "06" 不可以映射为 'F' ，因为 "6" 与 "06" 不同。
 *
 * 除了 上面描述的数字字母映射方案，编码消息中可能包含 '*' 字符，可以表示从 '1' 到 '9' 的任一数字（不包括 '0'）。例如，编码字符串
 * "1*" 可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条消息。对 "1*"
 * 进行解码，相当于解码该字符串可以表示的任何编码消息。
 *
 * 给你一个字符串 s ，由数字和 '*' 字符组成，返回 解码 该字符串的方法 数目 。
 *
 * 由于答案数目可能非常大，返回对 10^9 + 7 取余 的结果。
 *
 *
 *
 * 示例 1：
 *
 *
 * 输入：s = "*"
 * 输出：9
 * 解释：这一条编码消息可以表示 "1"、"2"、"3"、"4"、"5"、"6"、"7"、"8" 或 "9" 中的任意一条。
 * 可以分别解码成字符串 "A"、"B"、"C"、"D"、"E"、"F"、"G"、"H" 和 "I" 。
 * 因此，"*" 总共有 9 种解码方法。
 *
 *
 * 示例 2：
 *
 *
 * 输入：s = "1*"
 * 输出：18
 * 解释：这一条编码消息可以表示 "11"、"12"、"13"、"14"、"15"、"16"、"17"、"18" 或 "19" 中的任意一条。
 * 每种消息都可以由 2 种方法解码（例如，"11" 可以解码成 "AA" 或 "K"）。
 * 因此，"1*" 共有 9 * 2 = 18 种解码方法。
 *
 *
 * 示例 3：
 *
 *
 * 输入：s = "2*"
 * 输出：15
 * 解释：这一条编码消息可以表示 "21"、"22"、"23"、"24"、"25"、"26"、"27"、"28" 或 "29" 中的任意一条。
 * "21"、"22"、"23"、"24"、"25" 和 "26" 由 2 种解码方法，但 "27"、"28" 和 "29" 仅有 1 种解码方法。
 * 因此，"2*" 共有 (6 * 2) + (3 * 1) = 12 + 3 = 15 种解码方法。
 *
 *
 *
 *
 * 提示：
 *
 *
 * 1 <= s.length <= 10^5
 * s[i] 是 0 - 9 中的一位数字或字符 '*'
 *
 *
 */

/**
 * @File    :   639.解码方法-ii.go
 * @Time    :   2021/09/27 14:08:02
 * @Author  :   wylu
 * @Version :   1.0
 * @Contact :   15wylu@gmail.com
 * @License :   Copyright © 2020, wylu-CHINA-SHENZHEN. All rights reserved.
 * @Desc    :
 * 前言
 * 本题是「91. 解码方法」的进阶题目。
 *
 * 方法一：动态规划
 * 思路与算法
 *
 * 对于给定的字符串 s，设它的长度为 n，其中的字符从左到右依次为 s[1], s[2], ..., s[n]。
 * 我们可以使用动态规划的方法计算出字符串 s 的解码方法数。
 *
 * 具体地，设 f[i] 表示字符串 s 的前 i 个字符 s[1..i] 的解码方法数。
 * 在进行状态转移时，我们可以考虑最后一次解码使用了 s 中的哪些字符，
 * 那么会有下面的两种情况：
 *
 * 第一种情况是我们使用了一个字符，即 s[i] 进行解码，那么：
 *
 *   1.如果 s[i] 为 *，那么它对应着 [1, 9] 中的任意一种编码，
 *     有 9 种方案。因此状态转移方程为：
 *     f[i] = 9 * f[i-1]
 *
 *   2.如果 s[i] 为 0，那么它无法被解码。因此状态转移方程为：
 *     f[i] = 0
 *
 *   3.对于其它的情况，s[i] in [1, 9]，分别对应一种编码。因此状态转移方程为：
 *     f[i] = f[i-1]
 *
 * 第二种情况是我们使用了两个字符，即 s[i-1] 和 s[i] 进行编码。
 * 与第一种情况类似，我们需要进行分类讨论：
 *
 *   1.如果 s[i-1] 和 s[i] 均为 *，那么它们对应着 [11,19] 以及 [21,26] 中
 *     的任意一种编码，有 15 种方案。因此状态转移方程为：
 *     f[i] = 15 * f[i-2]
 *
 *   2.如果仅有 s[i-1] 为 *，那么当 s[i] in [0, 6] 时，s[i-1] 可以选择 1 和 2；
 *     当 s[i] in [7, 9] 时，s[i-1] 只能选择 1。因此状态转移方程为：
 *     f[i] = 2 * f[i-2],  s[i] in [0, 6]
 *     f[i] = f[i-2],  s[i] in [7, 9]
 *
 *   3.如果仅有 s[i] 为 *，那么当 s[i-1] 为 1 时，s[i] 可以在 [1, 9] 中进行选择；
 *     当 s[i-1] 为 2 时，s[i] 可以在 [1, 6] 中进行选择；对于其余情况，
 *     它们无法被解码。因此状态转移方程为：
 *     f[i] = 9 * f[i-2],  s[i] = 1
 *     f[i] =  6 * f[i-2],  s[i] = 2
 *     f[i] = 0,  otherwise
 *
 *   4.如果 s[i-1] 和 s[i] 均不为 *，那么只有 s[i-1] 不为 0 并且 s[i-1] 和 s[i]
 *     组成的数字小于等于 26 时，它们才能被解码。因此状态转移方程为：
 *     f[i] = f[i-2],  s[i] != 0 && int(s[i-1:i+1]) <= 26
 *     f[i] = 0,  otherwise
 *
 * 将上面的两种状态转移方程在对应的条件满足时进行累加，即可得到 f[i] 的值。
 * 在动态规划完成后，最终的答案即为 f[n]。
 *
 * 细节
 *
 * 动态规划的边界条件为：
 *
 *   f[0] = 1
 *
 * 即空字符串可以有 1 种解码方法，解码出一个空字符串。
 *
 * 同时，由于在大部分语言中，字符串的下标是从 0 而不是 1 开始的，
 * 因此在代码的编写过程中，我们需要将所有字符串的下标减去 1，
 * 与使用的语言保持一致。
 *
 * 最终的状态转移方程可以写成：
 *
 *   f[i] = alpha * f[i-1] + beta * f[i-2]
 *
 * 的形式。为了使得代码更加易读，我们可以使用两个辅助函数，给定对应的
 * 一个或两个字符，分别计算出 alpha 和 beta 的值。
 *
 * 注意到在状态转移方程中，f[i] 的值仅与 f[i-1] 和 f[i-2] 有关，
 * 因此我们可以使用三个变量进行状态转移，省去数组的空间。
 */

// @lc code=start
func numDecodings(s string) int {
	alpha := func(ch byte) int {
		if ch == '*' {
			return 9
		} else if ch == '0' {
			return 0
		}
		return 1
	}

	beta := func(ch1, ch2 byte) int {
		if ch1 != '*' && ch2 != '*' {
			if ch1 == '1' || (ch1 == '2' && ch2 <= '6') {
				return 1
			}
			return 0
		} else if ch1 == '*' && ch2 == '*' {
			return 15
		} else if ch1 == '*' {
			if ch2 <= '6' {
				return 2
			}
			return 1
		} else {
			if ch1 == '1' {
				return 9
			} else if ch1 == '2' {
				return 6
			}
			return 0
		}
	}

	MOD := 1000000007
	n := len(s)
	f1, f2 := 1, 1
	for i := 0; i < n; i++ {
		c1, c2 := 0, 0

		c1 = alpha(s[i])
		if i > 0 {
			c2 = beta(s[i-1], s[i])
		}

		f1, f2 = f2, (c1*f2+c2*f1)%MOD
	}

	return f2
}

// @lc code=end
