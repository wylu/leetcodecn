package p600to699

/*
 * @lc app=leetcode.cn id=600 lang=golang
 *
 * [600] 不含连续1的非负整数
 *
 * https://leetcode-cn.com/problems/non-negative-integers-without-consecutive-ones/description/
 *
 * algorithms
 * Hard (39.49%)
 * Likes:    146
 * Dislikes: 0
 * Total Accepted:    6.1K
 * Total Submissions: 15.8K
 * Testcase Example:  '5'
 *
 * 给定一个正整数 n，找出小于或等于 n 的非负整数中，其二进制表示不包含 连续的1 的个数。
 *
 * 示例 1:
 *
 * 输入: 5
 * 输出: 5
 * 解释:
 * 下面是带有相应二进制表示的非负整数<= 5：
 * 0 : 0
 * 1 : 1
 * 2 : 10
 * 3 : 11
 * 4 : 100
 * 5 : 101
 * 其中，只有整数3违反规则（有两个连续的1），其他5个满足规则。
 *
 * 说明: 1 <= n <= 10^9
 *
 */

/**
 * @File    :   600.不含连续-1-的非负整数.go
 * @Time    :   2021/09/11 11:43:43
 * @Author  :   wylu
 * @Version :   1.0
 * @Contact :   15wylu@gmail.com
 * @License :   Copyright © 2020, wylu-CHINA-SHENZHEN. All rights reserved.
 * @Desc    :
 * 方法一：动态规划
 * 思路
 *
 * 因为正整数 n 可以取到 10^9，所以显然是不可能通过暴力遍历从 1 到 n 的
 * 所有正整数来计算答案的。直观上，我们也可以感觉到，在暴力遍历的过程中，
 * 有非常多的计算是重复的。因此，我们考虑通过优化暴力遍历来解决这个问题。
 *
 * 为了形象地将重复计算的部分找出来，我们不妨将小于等于 n 的非负整数用
 * 01 字典树的形式表示，其中的每一条从根结点到叶结点的路径都是一个小于
 * 等于 n 的非负整数（包含前导 0）。
 *
 * 于是，题目可以转化为：在由所有小于等于 n 的非负整数构成的 01 字典树中，
 * 找出不包含连续 1 的从根结点到叶结点的路径数量。
 *
 * 以 n = 6 = (110)2 为例，我们可以发现：
 *
 * 对于 01 字典树中的两个节点 n1 和 n2，如果它们的高度相同，节点的值也
 * 相同，并且以它们为根结点的两棵子树都是满二叉树，那么它们包含的无连续
 * 1 的从根结点到叶结点的路径个数是相同的。
 *
 * 对于 01 字典树中的两个结点 n1 和 n2，如果 n2 是 n1 的子结点，并且它们
 * 的值都是 1，那么所有经过 n1 和 n2 的从根结点到叶结点的路径都一定包含
 * 连续的 1。
 *
 * 注意到由小于等于 n 的非负整数构成的 01 字典树是完全二叉树。于是有：
 * 如果某个结点包含两个子结点，那么其左子结点为根结点是 0 的满二叉树，
 * 其右子结点为根结点是 1 的完全二叉树；如果某个结点只有一个子结点，
 * 那么其左子结点为根结点是 0 的完全二叉树。
 *
 * 我们在计算不包含连续 1 的从根结点到叶结点的路径数量时，可以不断地将
 * 字典树拆分为根结点为 0 的满二叉树和根结点不定的完全二叉树。
 *
 * 于是，题目被拆分为以下两个子问题：
 *
 * 问题 1：如何计算根结点为 0 的满二叉树中，不包含连续 1 的从根结点到
 * 	叶结点的路径数量。
 * 问题 2：如何将将字典树拆分为根结点为 0 的满二叉树和根结点不定的完全
 * 	二叉树。
 *
 * 算法
 *
 * 首先解决第 1 个问题。
 *
 * 我们发现，在高度为 t、根结点为 0 的满二叉树中：其左子结点是高度为 t-1、
 * 根结点为 0 的满二叉树。其右子结点是高度为 t-1、根结点为 1 的满二叉树；
 * 但是因为路径中不能有连续 1，所以右子结点下只有其左子结点包含的从根结点
 * 到叶结点的路径才符合要求，而其左子结点是高度为 t-2、根结点为 0 的满二叉树。
 *
 * 于是，高度为 t、根结点为 0 的满二叉树中不包含连续 1 的从根结点到叶结点
 * 的路径数量，等于高度为 t-1、根结点为 0 的满二叉树中的路径数量与高度为 t-2，
 * 根结点为 0 的满二叉树中的路径数量之和。因此，这个问题可以通过动态规划解决：
 *
 * 状态：dp[t]。dp[t] 表示高度为 t+1、根结点为 0 的满二叉树中，不包含连续
 * 1 的从根结点到叶结点的路径数量。
 *
 * 状态转移方程：
 *
 * 	dp[t] = dp[t-1] + dp[t-2],  t >= 2
 * 	dp[t] = 1,  t < 2
 * ​
 * 接着解决第 2 个问题。
 *
 * 考虑到 01 字典树作为完全二叉树所具有的性质，我们可以从根结点开始处理。
 * 如果当前结点包含两个子结点，则用问题 1 的解决方法计算其左子结点中不包含
 * 连续 1 的从根结点到叶结点的路径数量，并继续处理其右子结点；如果当前结点
 * 只包含一个左子结点，那么继续处理其左子结点。
 *
 * 在实现中，需要注意如果已经出现连续 1 则不用继续处理；另外，叶结点没有
 * 子结点，需要作为特殊情况单独处理。
 */

// @lc code=start
func findIntegers(n int) int {
	// 预处理第 i 层满二叉树的路径数量
	dp := make([]int, 31)
	dp[0], dp[1] = 1, 1
	for i := 2; i < 31; i++ {
		dp[i] = dp[i-1] + dp[i-2]
	}

	pre := 0 // 记录上一层的根节点值
	res := 0 // 记录最终路径数
	for i := 29; i >= 0; i-- {
		val := 1 << i
		if n&val > 0 {
			// 有右子树
			res += dp[i+1] // 先将左子树（满二叉树）的路径数加到结果中

			// 处理右子树
			if pre == 1 {
				// 上一层为 1，且右子树根节点也为 1，此时连续两个 1，不满足题意
				break
			}

			// 标记当前根节点为 1
			pre = 1
		} else {
			// 无右子树，此时不能保证左子树是否为满二叉树，所以要在下一层再继续判断
			pre = 0
		}

		if i == 0 {
			res++
		}
	}

	return res
}

// @lc code=end
